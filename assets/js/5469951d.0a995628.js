"use strict";(self.webpackChunktutorial_site=self.webpackChunktutorial_site||[]).push([[713],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||l;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7955:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return m}});var r=n(7462),i=n(3366),l=(n(7294),n(3905)),o=["components"],a={sidebar_position:2},s="Command line tutorial",p={unversionedId:"linter/commandLine-tutorial",id:"linter/commandLine-tutorial",title:"Command line tutorial",description:"Introduction",source:"@site/docs/linter/commandLine-tutorial.md",sourceDirName:"linter",slug:"/linter/commandLine-tutorial",permalink:"/writing-prompt/docs/linter/commandLine-tutorial",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/linter/commandLine-tutorial.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/writing-prompt/docs/linter/intro"},next:{title:"Learning more",permalink:"/writing-prompt/docs/linter/learnMore"}},u={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Options",id:"options",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Use cases",id:"use-cases",level:2},{value:"Case 1: single file",id:"case-1-single-file",level:2},{value:"Output review",id:"output-review",level:3},{value:"Case 2: two files",id:"case-2-two-files",level:2},{value:"Case 3: directory",id:"case-3-directory",level:2},{value:"Case 4: ignoring files",id:"case-4-ignoring-files",level:2},{value:"<code>--ignore-path</code>",id:"--ignore-path",level:3},{value:"<strong>Example:</strong> lint files in the current directory using a non-local .eslintignore file",id:"example-lint-files-in-the-current-directory-using-a-non-local-eslintignore-file",level:4},{value:"<code>--ignore-pattern</code>",id:"--ignore-pattern",level:3},{value:"<strong>Example:</strong> lint using a glob pattern",id:"example-lint-using-a-glob-pattern",level:4},{value:"<strong>Example:</strong> linting with a non-local .eslintignore file",id:"example-linting-with-a-non-local-eslintignore-file",level:4},{value:"<strong>Example:</strong> restrict linting to avoid the <em>lib</em> subdirectory",id:"example-restrict-linting-to-avoid-the-lib-subdirectory",level:4},{value:"<strong>Example:</strong> a simpler method to restrict linting to avoid the <em>lib</em> subdirectory",id:"example-a-simpler-method-to-restrict-linting-to-avoid-the-lib-subdirectory",level:4},{value:"Case 5: fixing errors",id:"case-5-fixing-errors",level:2},{value:"<code>--fix</code>",id:"--fix",level:3},{value:"<strong>Example:</strong> lint contents of the <em>files</em> directory",id:"example-lint-contents-of-the-files-directory",level:4},{value:"<strong>Example:</strong> lint contents of the <em>files</em> directory and fix errors",id:"example-lint-contents-of-the-files-directory-and-fix-errors",level:4},{value:"<code>--fix-dry-run</code>",id:"--fix-dry-run",level:3},{value:"Case 6: formatting output",id:"case-6-formatting-output",level:2},{value:"<code>-f</code>, <code>--format</code>",id:"-f---format",level:3},{value:"<code>--format=json</code>",id:"--formatjson",level:4},{value:"<code>--format=html</code>",id:"--formathtml",level:4},{value:"Case 7: redirecting output",id:"case-7-redirecting-output",level:2},{value:"<code>-o</code>, <code>--output-file</code>",id:"-o---output-file",level:3},{value:"<strong>Example:</strong> redirect html-formatted output to a file",id:"example-redirect-html-formatted-output-to-a-file",level:4},{value:"Sample project",id:"sample-project",level:2},{value:"Directory structure",id:"directory-structure",level:3},{value:"Test files",id:"test-files",level:3}],d={toc:m};function c(e){var t=e.components,a=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"command-line-tutorial"},"Command line tutorial"),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Now that you've installed ESLint and have it configured, this tutorial will familiarize you with some common command-line options and their applications."),(0,l.kt)("p",null,"Topics covered in this document:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Syntax review and common options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use cases with examples (linting a single file, linting two files, linting contents of directories, ignoring files, fixing errors, formatting output, redirecting output)"))),(0,l.kt)("h2",{id:"syntax"},"Syntax"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint [options] [ file | dir | glob ]")),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option"),(0,l.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-h"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"--help")),(0,l.kt)("td",{parentName:"tr",align:null},"Provide a list of available options.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-f"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"--format")),(0,l.kt)("td",{parentName:"tr",align:null},"Allows you to format ESLint console output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--fix")),(0,l.kt)("td",{parentName:"tr",align:null},"Automatically fixes errors when possible. Files are updated.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--fix-dry-run")),(0,l.kt)("td",{parentName:"tr",align:null},"Preview-only version of ",(0,l.kt)("inlineCode",{parentName:"td"},"--fix"),". Files are not updated.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--ignore-path")),(0,l.kt)("td",{parentName:"tr",align:null},"Allows you to specify the path to an ignore file.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-",(0,l.kt)("inlineCode",{parentName:"td"},"-ignore-pattern")),(0,l.kt)("td",{parentName:"tr",align:null},"Allows you to specify ignore patterns ",(0,l.kt)("em",{parentName:"td"},"in addition")," to those found in an ignore file.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-o"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"--output-file")),(0,l.kt)("td",{parentName:"tr",align:null},"Allows you to redirect ESLint output to a file.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTES:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Full options list -")," At any time, you can always obtain a full list of options by running:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"npx eslint -h\n")),(0,l.kt)("p",{parentName:"li"},"If you require more detailed information on any of the available options, a full command-line interface ",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/command-line-interface"},"reference guide")," is provided on the ESLint project site.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Short-form options -")," In some cases, ESLint supports short-form equivalents of the standard long-form options (e.g., ",(0,l.kt)("inlineCode",{parentName:"p"},"-f")," (format), ",(0,l.kt)("inlineCode",{parentName:"p"},"-h")," (help), ",(0,l.kt)("inlineCode",{parentName:"p"},"-v")," (version), ",(0,l.kt)("inlineCode",{parentName:"p"},"-o")," (output), etc.)."))),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"This tutorial assumes that all commands will be run either in a terminal window or their equivalent on your system.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Familiarity with .eslintignore files."),(0,l.kt)("p",{parentName:"li"},"In much the same way git uses .gitignore files, ESLint relies on patterns in .eslintignore files to guide its execution. In fact, since eslintignore follows the same ",(0,l.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitignore"},"specification")," as gitignore, your git experience will be of assistance when creating\n.eslintignore files for your project. For further details, please refer to the ESLint ",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/configuring/ignoring-code"},"documentation"),"."),(0,l.kt)("p",{parentName:"li"},"There are 2 major aspects of this specification that you should keep in mind for this tutorial:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Glob patterns")," ",(0,l.kt)("strong",{parentName:"p"},"-")," like .gitignore, .eslintignore files will accept patterns like ",(0,l.kt)("inlineCode",{parentName:"p"},"*.jpg")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"lib*"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Priority -")," By default, ESLint will use the .eslintignore in the current directory. If a .eslintignore is found, then those preferences are used when linting files. Since only one .eslintignore file can be used at a time, ESLint will ignore any other .eslintignore files it encounters when traversing directories.")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Familiarity with the structure and contents of the tutorial project."),(0,l.kt)("p",{parentName:"li"},"To review the project's directory structure and the contents of its test files, please review the ",(0,l.kt)("a",{parentName:"p",href:"#sample-project"},"Sample project")," section before continuing with the tutorial."))),(0,l.kt)("h2",{id:"use-cases"},"Use cases"),(0,l.kt)("p",null,"For this tutorial, a sample project, outlined ",(0,l.kt)("a",{parentName:"p",href:"#sample-project"},"below"),", will be used as the basis of all examples. In addition, ESLint's default output format (",(0,l.kt)("em",{parentName:"p"},"stylish"),") will be used in each explored use case."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE:")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If you would like more information on alternate output formats, please see the ",(0,l.kt)("a",{parentName:"p",href:"#case-6-formatting-output"},"formatting output")," section below.")),(0,l.kt)("h2",{id:"case-1-single-file"},"Case 1: single file"),(0,l.kt)("p",null,"["," Present working directory (PWD): C:","\\","Tutorials","\\","files ","]"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint hello.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"C:\\Tutorials\\files\\hello.js\n1:10    error   'helloworld' is defined but never used          no-unused-vars\n\n5:5     error   'greeter' is assigned a value but never used    no-unused-vars\n\n6:1     error   'helloWorld' is not defined                     no-undef\n\n6:12    error   'greeter2' is not defined                       no-undef\n\n?       4 problems (4 errors, 0 warnings)\n")),(0,l.kt)("h3",{id:"output-review"},"Output review"),(0,l.kt)("p",null,"At this point, please take a moment to look over the output above. In this simple example, several obvious JavaScript errors have been intentionally included to illustrate the capabilities of ESLint. Here, ESLint correctly caught both the undefined (",(0,l.kt)("em",{parentName:"p"},"no-undef"),") terms\n(",(0,l.kt)("em",{parentName:"p"},"helloWorld")," and ",(0,l.kt)("em",{parentName:"p"},"greeter2"),") and the unused (",(0,l.kt)("em",{parentName:"p"},"no-unused-vars"),") terms (",(0,l.kt)("em",{parentName:"p"},"helloworld"),", ",(0,l.kt)("em",{parentName:"p"},"greeter"),")."),(0,l.kt)("p",null,"As you can see, ESLint displays a separate line for each error it encounters while linting ",(0,l.kt)("em",{parentName:"p"},"hello.js.")," Each line follows the format described below."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Error format:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-txt"},"<line #> : <position>    <error level>  <error text>            <rule>\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Problem summary:")),(0,l.kt)("p",null,"At the end of the error report, ESLint displays a ",(0,l.kt)("em",{parentName:"p"},"cumulative")," summary of problems (errors and warnings) encountered while linting. When multiple files are linted, the output will include a list of errors for each file."),(0,l.kt)("h2",{id:"case-2-two-files"},"Case 2: two files"),(0,l.kt)("p",null,"["," PWD: C:","\\","Tutorials","\\","files ","]"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint hello.js hello2.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"C:\\Tutorials\\files\\hello.js\n[<errors>]\n\nC:\\Tutorials\\files\\hello2.js\n3:2     error   Unnecessary semicolon                           no-extra-semi\n\n?       5 problems (5 errors, 0 warnings)\n        1 error and 0 warnings potentially fixable with the `--fix` option.\n")),(0,l.kt)("h2",{id:"case-3-directory"},"Case 3: directory"),(0,l.kt)("p",null,'This example will illustrate how to lint the contents of the "files2"\ndirectory.'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE:")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Without specifying any ",(0,l.kt)("em",{parentName:"p"},"ignore"),' criteria, the linter will traverse all subdirectories within "files2." In this example, the contents of "lib" would be linted as well.')),(0,l.kt)("p",null,"In the next section, ",(0,l.kt)("a",{parentName:"p",href:"#case-4-ignoring-files"},(0,l.kt)("strong",{parentName:"a"},"Ignoring files")),", you will learn how to use some of ESLint's options to restrict output."),(0,l.kt)("p",null,"["," PWD: C:","\\","Tutorials ","]"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint files2")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"C:\\Tutorials\\files2\\hello4.js\n1:10    error   'helloworld' is defined but never used          no-unused-vars\n\n5:5     error   'greeter' is assigned a value but never used    no-unused-vars\n\n6:1     error   'helloWorld' is not defined                     no-undef\n\n6:12    error   'greeter2' is not defined                       no-undef\n\nC:\\Tutorials\\files2\\lib\\hello3.js\n1:10    error   'helloworld' is defined but never used          no-unused-vars\n\n5:5     error 'greeter' is assigned a value but never used      no-unused-vars\n\n6:1     error 'helloWorld' is not defined                       no-undef\n\n6:12    error 'greeter2' is not defined                         no-undef\n\n?       9 problems (9 errors, 0 warnings)\n\n        1 error and 0 warnings potentially fixable with the `--fix` option.\n")),(0,l.kt)("h2",{id:"case-4-ignoring-files"},"Case 4: ignoring files"),(0,l.kt)("h3",{id:"--ignore-path"},(0,l.kt)("inlineCode",{parentName:"h3"},"--ignore-path")),(0,l.kt)("p",null,"This option allows you to specify the file to use as your .eslintignore. By default, ESLint looks in the current working directory for .eslintignore. You can override this behavior by providing a path to a different file."),(0,l.kt)("h4",{id:"example-lint-files-in-the-current-directory-using-a-non-local-eslintignore-file"},(0,l.kt)("strong",{parentName:"h4"},"Example:")," lint files in the current directory using a non-local .eslintignore file"),(0,l.kt)("p",null,"["," PWD: C:","\\","Tutorials","\\","files2 ","]"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint --ignore-path ..\\.eslintignore .\\*")),(0,l.kt)("h3",{id:"--ignore-pattern"},(0,l.kt)("inlineCode",{parentName:"h3"},"--ignore-pattern")),(0,l.kt)("p",null,"This option allows you to specify patterns of files to ignore (in addition to those in .eslintignore). If you wish to filter on multiple patterns, ESLint allows you to repeat the option, one for each pattern."),(0,l.kt)("h4",{id:"example-lint-using-a-glob-pattern"},(0,l.kt)("strong",{parentName:"h4"},"Example:")," lint using a glob pattern"),(0,l.kt)("p",null,"["," PWD: C:","\\","Tutorials\\ ]"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'npx eslint --ignore-pattern "hello[1-3]*.js" files')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE:")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Similar to ",(0,l.kt)("inlineCode",{parentName:"p"},"--rule")," and .eslintrc files, the syntax for the ",(0,l.kt)("inlineCode",{parentName:"p"},"--ignore-pattern")," option matches that for .eslintignore files. In general, if your ignore pattern contains a glob (e.g.,\n",(0,l.kt)("inlineCode",{parentName:"p"},"hello[1-3]*.js"),", it is recommended that you enclose the pattern in quotes in order to avoid interpretation by the shell.")),(0,l.kt)("h4",{id:"example-linting-with-a-non-local-eslintignore-file"},(0,l.kt)("strong",{parentName:"h4"},"Example:")," linting with a non-local .eslintignore file"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"This command lints files in the current directory (files) as well as those in ","\\","lib.",(0,l.kt)("br",{parentName:"p"}),"\n","It also makes use of the .eslintignore file in the ",(0,l.kt)("em",{parentName:"p"},"Tutorials")," directory rather than the one present in ",(0,l.kt)("em",{parentName:"p"},"files")," (the current directory).")),(0,l.kt)("p",null,"["," PWD: C:","\\","Tutorials","\\","files\\ ]"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint --ignore-path ..\\.eslintignore .\\")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"C:\\Tutorials\\files\\hello.js\n1:10    error   'helloworld' is defined but never used          no-unused-vars\n\n5:5     error   'greeter' is assigned a value but never used    no-unused-vars\n\n6:1     error   'helloWorld' is not defined                     no-undef\n\n6:12    error   'greeter2' is not defined                       no-undef\n\nC:\\Tutorials\\files\\hello2.js\n3:2     error   Unnecessary semicolon                           no-extra-semi\n\nC:\\Tutorials\\files\\lib\\hello3.js\n1:10    error   'helloworld' is defined but never used          no-unused-vars\n\n5:5     error   'greeter' is assigned a value but never used    no-unused-vars\n\n6:1     error   'helloWorld' is not defined                     no-undef\n\n6:12    error   'greeter2' is not defined                       no-undef\n\n?       9 problems (9 errors, 0 warnings)\n        1 error and 0 warnings potentially fixable with the `--fix` option.\n")),(0,l.kt)("h4",{id:"example-restrict-linting-to-avoid-the-lib-subdirectory"},(0,l.kt)("strong",{parentName:"h4"},"Example:")," restrict linting to avoid the ",(0,l.kt)("em",{parentName:"h4"},"lib")," subdirectory"),(0,l.kt)("p",null,"If you wish to confine linting to just the current directory (",(0,l.kt)("em",{parentName:"p"},"files"),") you can exclude the ",(0,l.kt)("em",{parentName:"p"},"lib")," subdirectory with the use of the ignore-pattern option:"),(0,l.kt)("p",null,"["," PWD: C:","\\","Tutorials","\\","files\\ ]"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'npx eslint --ignore-path ..\\.eslintignore --ignore-pattern "lib*" .\\')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"C:\\Tutorials\\files\\hello.js\n[errors]\n\nC:\\Tutorials\\files\\hello2.js\n[errors]\n\nC:\\Tutorials\\files\\lib\\hello3.js\n[errors]\n\n?   9 problems (9 errors, 0 warnings)\n    1 error and 0 warnings potentially fixable with the `--fix` option.\n")),(0,l.kt)("h4",{id:"example-a-simpler-method-to-restrict-linting-to-avoid-the-lib-subdirectory"},(0,l.kt)("strong",{parentName:"h4"},"Example:")," a simpler method to restrict linting to avoid the ",(0,l.kt)("em",{parentName:"h4"},"lib")," subdirectory"),(0,l.kt)("p",null,"In this example, you'll see how to exclude the ",(0,l.kt)("em",{parentName:"p"},"lib")," subdirectory by letting the local .eslintignore file do all the heavy lifting. This particular command makes use of 2 properties that you were introduced to earlier in the tutorial:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"By default, eslint will always look for a .eslintignore file in the current directory.",(0,l.kt)("br",{parentName:"p"}),"\n","From the ",(0,l.kt)("a",{parentName:"p",href:"#directory-structure"},"Directory structure")," section above, you can see that the files directory contains an ignore file.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Patterns attached to any ",(0,l.kt)("inlineCode",{parentName:"p"},"--ignore-pattern")," options are applied ",(0,l.kt)("em",{parentName:"p"},"after")," those in an ignore file.",(0,l.kt)("br",{parentName:"p"}),"\n","This means that you could simply include these patterns in the ignore file from the start."))),(0,l.kt)("p",null,"["," PWD: C:","\\","Tutorials","\\","files ","]"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint .\\")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE:")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Since C:","\\","Tutorials","\\","files","\\",'.eslintrc already contains the ignore pattern "lib',"*",'" (see ',(0,l.kt)("a",{parentName:"p",href:"#test-files"},"Test files"),", below), the ",(0,l.kt)("em",{parentName:"p"},"lib")," subdirectory will be excluded from linting.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"C:\\Tutorials\\files\\hello.js\n[errors]\n\nC:\\Tutorials\\files\\hello2.js\n[errors]\n\n?   5 problems (5 errors, 0 warnings)\n    1 error and 0 warnings potentially fixable with the `--fix` option.\n")),(0,l.kt)("p",null,"As you can see from the above output, eslint has avoided linting any files within the ",(0,l.kt)("em",{parentName:"p"},"lib")," subdirectory."),(0,l.kt)("h2",{id:"case-5-fixing-errors"},"Case 5: fixing errors"),(0,l.kt)("h3",{id:"--fix"},(0,l.kt)("inlineCode",{parentName:"h3"},"--fix")),(0,l.kt)("p",null,"When this option is included, ESLint will try and fix as many detected issues as possible while linting."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE:")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"This is a destructive process"),". If ESLint is able to apply the\nrecommended fixes, they will be made directly to files themselves\nwithout any additional warning or user input."),(0,l.kt)("p",{parentName:"blockquote"},"Any uncorrectable issues will be included in the standard error\nreport."),(0,l.kt)("p",{parentName:"blockquote"},"If you wish to preview the fix process without committing to the\noriginal files, you can use the ","-","-fix-dry-run option (please see\nbelow).")),(0,l.kt)("h4",{id:"example-lint-contents-of-the-files-directory"},(0,l.kt)("strong",{parentName:"h4"},"Example:")," lint contents of the ",(0,l.kt)("em",{parentName:"h4"},"files")," directory"),(0,l.kt)("p",null,"["," PWD: C:","\\","Tutorials\\ ]"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint files")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"C:\\Tutorials\\files\\hello.js\n[<errors>]\n\nC:\\Tutorials\\files\\hello2.js\n3:2 error   Unnecessary semicolon                       no-extra-semi\n\nC:\\Tutorials\\files\\lib\\hello3.js\n[<errors>]\n\n?   9 problems (9 errors, 0 warnings)\n    1 error and 0 warnings potentially fixable with the `--fix` option.\n")),(0,l.kt)("h4",{id:"example-lint-contents-of-the-files-directory-and-fix-errors"},(0,l.kt)("strong",{parentName:"h4"},"Example:")," lint contents of the ",(0,l.kt)("em",{parentName:"h4"},"files")," directory and fix errors"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint --fix files")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"C:\\Tutorials\\files\\hello.js\n[<errors>]\n\nC:\\Tutorials\\files\\lib\\hello3.js\n[<errors>]\n\n?   8 problems (8 errors, 0 warnings)\n")),(0,l.kt)("h3",{id:"--fix-dry-run"},(0,l.kt)("inlineCode",{parentName:"h3"},"--fix-dry-run")),(0,l.kt)("p",null,"This option allows you to preview potential fixes to your code without committing them to the files themselves."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE:")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"--fix-dry-run")," option was used instead of the ",(0,l.kt)("inlineCode",{parentName:"p"},"--fix")," option in the example above, the output of the command would have been identical. However, unlike with the ",(0,l.kt)("inlineCode",{parentName:"p"},"--fix")," option, the fix would not have been applied to hello2.js.")),(0,l.kt)("h2",{id:"case-6-formatting-output"},"Case 6: formatting output"),(0,l.kt)("h3",{id:"-f---format"},(0,l.kt)("inlineCode",{parentName:"h3"},"-f"),", ",(0,l.kt)("inlineCode",{parentName:"h3"},"--format")),(0,l.kt)("p",null,"This option allows you to specify a particular format for ESLint's console output."),(0,l.kt)("p",null,"Currently, there are 10 output formats that ESLint supports:\n",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/formatters/#checkstyle"},"checkstyle"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/formatters/#compact"},"compact"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/formatters/#html"},"html"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/formatters/#jslint-xml"},"jslint-xml"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/formatters/#json"},"json"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/formatters/#junit"},"junit"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/formatters/#stylish"},"stylish"),"\n(default), ",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/formatters/#tap"},"tap"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/formatters/#unix"},"unix"),", and\n",(0,l.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/formatters/#visualstudio"},"Visualstudio"),"."),(0,l.kt)("p",null,"The default format, ",(0,l.kt)("em",{parentName:"p"},"stylish"),", is the one that you have seen throughout this tutorial.",(0,l.kt)("br",{parentName:"p"}),"\n","If you wish to suppress the default color style for this format, add the ",(0,l.kt)("inlineCode",{parentName:"p"},"--no-color")," option when running the eslint command."),(0,l.kt)("p",null,"Depending on your personal preferences and use cases, other formats may be a better choice. The ",(0,l.kt)("em",{parentName:"p"},"json")," format captures eslint console output in a more structured manner, for instance, while ",(0,l.kt)("em",{parentName:"p"},"html")," offers a more human-readable, report-style format."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE:")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Both the ",(0,l.kt)("em",{parentName:"p"},"json")," and ",(0,l.kt)("em",{parentName:"p"},"html")," formats are good candidates for redirecting output to a file. This will be covered in the ",(0,l.kt)("a",{parentName:"p",href:"#case-7-redirecting-output"},"redirecting output")," section below.")),(0,l.kt)("h4",{id:"--formatjson"},(0,l.kt)("inlineCode",{parentName:"h4"},"--format=json")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint --format=json files\\hello2.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[{"filePath":"C:\\Tutorials\\\\files\\\\hello2.js","messages":[{"ruleId":"no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":3,"column":2,"nodeType":"EmptyStatement","messageId":"unexpected","endLine":3,"endColumn":3,"fix":{"range":[68,77],"text":"}\\r\\n\\r\\nvar"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"function helloWorld(greeter) {\\r\\n  alert(\\"Hello, \\" + greeter + \\"!\\")\\r\\n};\\r\\n\\r\\nvar greeter = window.prompt(\\"Enter your name: \\");\\r\\nhelloWorld(greeter);\\r\\n","usedDeprecatedRules":[]}]\n')),(0,l.kt)("h4",{id:"--formathtml"},(0,l.kt)("inlineCode",{parentName:"h4"},"--format=html")),(0,l.kt)("p",null,"["," PWD: C:","\\","Tutorials ","]"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint --format=html files")),(0,l.kt)("p",null,(0,l.kt)("img",{loading:"lazy",alt:"htmlFormat",src:n(9638).Z,width:"1027",height:"253"})),(0,l.kt)("h2",{id:"case-7-redirecting-output"},"Case 7: redirecting output"),(0,l.kt)("h3",{id:"-o---output-file"},(0,l.kt)("inlineCode",{parentName:"h3"},"-o"),", ",(0,l.kt)("inlineCode",{parentName:"h3"},"--output-file")),(0,l.kt)("p",null,"This format allows you to redirect output to a file."),(0,l.kt)("h4",{id:"example-redirect-html-formatted-output-to-a-file"},(0,l.kt)("strong",{parentName:"h4"},"Example:")," redirect html-formatted output to a file"),(0,l.kt)("p",null,"["," PWD: C:","\\","Tutorials ","]"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"npx eslint --format=html -o errorSummary.html files")),(0,l.kt)("p",null,"Once again, ESLint inspects the content of the ",(0,l.kt)("em",{parentName:"p"},"files")," directory and formats the linting output. In this case, however, the formatted output is now directed to the file ",(0,l.kt)("em",{parentName:"p"},"errorSummary.html")," instead of the console."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE:")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The ESLint Report screen capture shown in the ",(0,l.kt)("a",{parentName:"p",href:"#formathtml"},"formatting output")," section above is generated from this ",(0,l.kt)("em",{parentName:"p"},"errorSummary.html")," file.")),(0,l.kt)("h2",{id:"sample-project"},"Sample project"),(0,l.kt)("h3",{id:"directory-structure"},"Directory structure"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-txt"},"Tutorials\n \u2523 files\n \u2503 \u2523 lib\n \u2503 \u2503 \u2523 .eslintrc.js\n \u2503 \u2503 \u2517 hello3.js\n \u2503 \u2523 .eslintignore\n \u2503 \u2523 hello.js\n \u2503 \u2523 hello2.js\n \u2503 \u2517 sComand.json\n \u2523 files2\n \u2503 \u2523 lib\n \u2503 \u2503 \u2517 hello3.js\n \u2503 \u2517 hello4.js\n \u2523 .eslintignore\n \u2517 .eslintrc.js\n")),(0,l.kt)("h3",{id:"test-files"},"Test files"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"C:","\\","Tutorials","\\",".eslintignore:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-json"},"# comments allowed\n.eslintrc.*\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"C:","\\","Tutorials","\\","files","\\",".eslintignore:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-json"},"# comments allowed  \n*.json\n.eslintrc.*\nlib*\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"hello.js"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},'function helloworld(greeter) {\n  alert("Hello, " + greeter + "!")\n}\n\nvar greeter = window.prompt("Enter your name: ");\nhelloWorld(greeter2);\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"hello2.js"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},'function helloWorld(greeter) {\n  alert("Hello, " + greeter + "!")\n};\n\nvar greeter = window.prompt("Enter your name: ");\nhelloWorld(greeter);\n')))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTES:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"For simplicity, both hello3.js and hello4.js are the same as hello.js.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"For compactness, linting results for a file will be abbreviated after having been displayed in full."))))}c.isMDXComponent=!0},9638:function(e,t,n){t.Z=n.p+"assets/images/FormatHTML-c76ee7e534f9fd1b6f33259945ae8170.png"}}]);